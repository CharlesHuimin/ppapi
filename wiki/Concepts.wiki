#summary Important concepts for working with PPAPI.

= Interfaces =


= Loading and identifying a plugin =


= PP_Var =

A `PP_Var` represents an object for binding to JavaScript or the DOM. It can represent boolean types, numeric values, strings, and generic JavaScript-type objects. It can be most convenient to think of a `PP_Var` as a JavaScript variable, which doesn't have a predefined type associated with it.

== PP_Var lifetimes ==

A `PP_Var` containing a string or an object is reference counted, with the object itself residing inside the browser. When the reference count reaches 0, the string or object will be freed. The plugin uses the functions `PPB_Var.AddRef` and `PPB_Var.Release` to take and release references.

It is legal to call `AddRef` and `Release` on any type of var. But since boolean and numeric types are "inline" inside the var, there is no extra memory management required.

*Important:* JavaScript objects can have references to other JavaScript objects. Keeping a reference to one object can in turn keep many other objects alive. For example, a plugin might have a reference to a simple callback object. But that object may have a reference to an object in the DOM. Keeping the reference to the callback object alive can in turn cause a leak of the entire DOM of the page.

== Strings in PP_Var ==



== Objects in PP_Var ==



= PP_Resource =

While a `PP_Var' represents a JavaScript object or value, a resource represents an object managed exclusively within the plugin layer. Examples include audio devices, images, and drawing contexts. The resource value is an opaque handle assigned by the browser that identifies the object.

A resource is reference counted much like a `PP_Var'. The browser will keep the object alive so long as the reference count is nonzero. When the reference count reaches zero, it will be deleted.

== Typical PP_Resource usage ==

Typically, a resource of one type is managed using one interface. A typical example of a resource interface is `ImageData`. It provides:

  * A `Create` function to create an image resource. The returned resources automatically has a reference count of 1. The plugin is responsible for eventually calling `PPB_Core.ReleaseResource` to release this reference. On error, the creation function will return a resource with a 0 `id`, which is an invalid resource handle.

  * An `IsImageData` function to querying the type of a resource. The browser internally maintains a type for each resource, although the `PP_Resource` struct does not carry an inherent type. In normal usage, a plugin will know the type of its resources since it will have created them, but in some cases, such as for debugging purposes, a plugin will want to check the type.

  * Then the interface will contain functions specifically for working with resources of that type. These functions will generally fail if provided a `PP_Resource` identifying a non-`ImageData` object.